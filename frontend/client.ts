// Code generated by the Encore 1.48.8 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly ai: ai.ServiceClient
    public readonly codex: codex.ServiceClient
    public readonly community: community.ServiceClient
    public readonly journal: journal.ServiceClient
    public readonly meditation: meditation.ServiceClient
    public readonly messenger: messenger.ServiceClient
    public readonly social: social.ServiceClient
    public readonly system: system.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.ai = new ai.ServiceClient(base)
        this.codex = new codex.ServiceClient(base)
        this.community = new community.ServiceClient(base)
        this.journal = new journal.ServiceClient(base)
        this.meditation = new meditation.ServiceClient(base)
        this.messenger = new messenger.ServiceClient(base)
        this.social = new social.ServiceClient(base)
        this.system = new system.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    chat as api_ai_assistant_chat,
    deleteConversation as api_ai_assistant_deleteConversation,
    getConversation as api_ai_assistant_getConversation,
    listConversations as api_ai_assistant_listConversations
} from "~backend/ai/assistant";
import {
    getPreferences as api_ai_preferences_getPreferences,
    updatePreferences as api_ai_preferences_updatePreferences
} from "~backend/ai/preferences";

export namespace ai {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.chat = this.chat.bind(this)
            this.deleteConversation = this.deleteConversation.bind(this)
            this.enableAdminMode = this.enableAdminMode.bind(this)
            this.getConversation = this.getConversation.bind(this)
            this.getPreferences = this.getPreferences.bind(this)
            this.listConversations = this.listConversations.bind(this)
            this.updatePreferences = this.updatePreferences.bind(this)
        }

        /**
         * Sends a message to the AI assistant and gets a response.
         */
        public async chat(params: RequestType<typeof api_ai_assistant_chat>): Promise<StreamIn<StreamResponse<typeof api_ai_assistant_chat>>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "context_data":    params["context_data"] === undefined ? undefined : String(params["context_data"]),
                "context_type":    params["context_type"],
                "conversation_id": params["conversation_id"],
                message:           params.message,
            })

            return await this.baseClient.createStreamIn(`/ai/chat`, {query})
        }

        /**
         * Deletes a conversation and all its messages.
         */
        public async deleteConversation(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/ai/conversations/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Enables admin mode for the current user (restricted endpoint).
         */
        public async enableAdminMode(): Promise<void> {
            await this.baseClient.callTypedAPI(`/ai/admin/enable`, {method: "POST", body: undefined})
        }

        /**
         * Retrieves a specific conversation with its messages.
         */
        public async getConversation(params: { id: string }): Promise<ResponseType<typeof api_ai_assistant_getConversation>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/conversations/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_assistant_getConversation>
        }

        /**
         * Retrieves the current user's AI assistant preferences.
         */
        public async getPreferences(): Promise<ResponseType<typeof api_ai_preferences_getPreferences>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/preferences`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_preferences_getPreferences>
        }

        /**
         * Retrieves all conversations for the current user.
         */
        public async listConversations(): Promise<ResponseType<typeof api_ai_assistant_listConversations>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/conversations`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_assistant_listConversations>
        }

        /**
         * Updates the current user's AI assistant preferences.
         */
        public async updatePreferences(params: RequestType<typeof api_ai_preferences_updatePreferences>): Promise<ResponseType<typeof api_ai_preferences_updatePreferences>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ai/preferences`, {method: "PUT", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ai_preferences_updatePreferences>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getAnalytics as api_codex_analytics_getAnalytics } from "~backend/codex/analytics";
import {
    createEntry as api_codex_entries_createEntry,
    deleteEntry as api_codex_entries_deleteEntry,
    getEntry as api_codex_entries_getEntry,
    listEntries as api_codex_entries_listEntries,
    updateEntry as api_codex_entries_updateEntry
} from "~backend/codex/entries";
import { health as api_codex_health_health } from "~backend/codex/health";
import {
    findSimilarEntries as api_codex_sharing_findSimilarEntries,
    reactToEntry as api_codex_sharing_reactToEntry,
    shareEntry as api_codex_sharing_shareEntry,
    unshareEntry as api_codex_sharing_unshareEntry
} from "~backend/codex/sharing";

export namespace codex {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createEntry = this.createEntry.bind(this)
            this.deleteEntry = this.deleteEntry.bind(this)
            this.findSimilarEntries = this.findSimilarEntries.bind(this)
            this.getAnalytics = this.getAnalytics.bind(this)
            this.getEntry = this.getEntry.bind(this)
            this.health = this.health.bind(this)
            this.listEntries = this.listEntries.bind(this)
            this.reactToEntry = this.reactToEntry.bind(this)
            this.shareEntry = this.shareEntry.bind(this)
            this.unshareEntry = this.unshareEntry.bind(this)
            this.updateEntry = this.updateEntry.bind(this)
        }

        /**
         * Creates a new codex entry.
         */
        public async createEntry(params: RequestType<typeof api_codex_entries_createEntry>): Promise<ResponseType<typeof api_codex_entries_createEntry>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/codex/entries`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_codex_entries_createEntry>
        }

        /**
         * Deletes a codex entry.
         */
        public async deleteEntry(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/codex/entries/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Finds similar entries to a given entry.
         */
        public async findSimilarEntries(params: RequestType<typeof api_codex_sharing_findSimilarEntries>): Promise<ResponseType<typeof api_codex_sharing_findSimilarEntries>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit: params.limit === undefined ? undefined : String(params.limit),
                mode:  params.mode === undefined ? undefined : String(params.mode),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/codex/entries/${encodeURIComponent(params.entry_id)}/similar`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_codex_sharing_findSimilarEntries>
        }

        /**
         * Retrieves codex analytics for the current user.
         */
        public async getAnalytics(): Promise<ResponseType<typeof api_codex_analytics_getAnalytics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/codex/analytics`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_codex_analytics_getAnalytics>
        }

        /**
         * Retrieves a specific codex entry.
         */
        public async getEntry(params: { id: string }): Promise<ResponseType<typeof api_codex_entries_getEntry>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/codex/entries/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_codex_entries_getEntry>
        }

        /**
         * Health check endpoint for the codex module.
         */
        public async health(): Promise<ResponseType<typeof api_codex_health_health>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/codex/health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_codex_health_health>
        }

        /**
         * Retrieves all codex entries for the current user.
         */
        public async listEntries(params: RequestType<typeof api_codex_entries_listEntries>): Promise<ResponseType<typeof api_codex_entries_listEntries>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "date_from":     params["date_from"] === undefined ? undefined : params["date_from"].toISOString(),
                "date_to":       params["date_to"] === undefined ? undefined : params["date_to"].toISOString(),
                "entry_type":    params["entry_type"],
                limit:           params.limit === undefined ? undefined : String(params.limit),
                mode:            params.mode === undefined ? undefined : String(params.mode),
                offset:          params.offset === undefined ? undefined : String(params.offset),
                "resonance_max": params["resonance_max"] === undefined ? undefined : String(params["resonance_max"]),
                "resonance_min": params["resonance_min"] === undefined ? undefined : String(params["resonance_min"]),
                search:          params.search,
                tags:            params.tags?.map((v) => v),
                "verified_only": params["verified_only"] === undefined ? undefined : String(params["verified_only"]),
                visibility:      params.visibility === undefined ? undefined : String(params.visibility),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/codex/entries`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_codex_entries_listEntries>
        }

        /**
         * Reacts to a codex entry.
         */
        public async reactToEntry(params: RequestType<typeof api_codex_sharing_reactToEntry>): Promise<void> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                kind: params.kind,
            }

            await this.baseClient.callTypedAPI(`/codex/entries/${encodeURIComponent(params.entry_id)}/react`, {method: "POST", body: JSON.stringify(body)})
        }

        /**
         * Shares a codex entry with another user.
         */
        public async shareEntry(params: RequestType<typeof api_codex_sharing_shareEntry>): Promise<void> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "can_edit": params["can_edit"],
                "user_id":  params["user_id"],
            }

            await this.baseClient.callTypedAPI(`/codex/entries/${encodeURIComponent(params.entry_id)}/share`, {method: "POST", body: JSON.stringify(body)})
        }

        /**
         * Unshares a codex entry from a user.
         */
        public async unshareEntry(params: { entry_id: string, user_id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/codex/entries/${encodeURIComponent(params.entry_id)}/share/${encodeURIComponent(params.user_id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Updates an existing codex entry.
         */
        public async updateEntry(params: RequestType<typeof api_codex_entries_updateEntry>): Promise<ResponseType<typeof api_codex_entries_updateEntry>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content:               params.content,
                context:               params.context,
                "entry_type":          params["entry_type"],
                "occurred_at":         params["occurred_at"],
                "resonance_channels":  params["resonance_channels"],
                "resonance_rating":    params["resonance_rating"],
                "resonance_signature": params["resonance_signature"],
                tags:                  params.tags,
                title:                 params.title,
                visibility:            params.visibility,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/codex/entries/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_codex_entries_updateEntry>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createSharedLearning as api_community_shared_learnings_createSharedLearning,
    listSharedLearnings as api_community_shared_learnings_listSharedLearnings
} from "~backend/community/shared_learnings";

export namespace community {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createSharedLearning = this.createSharedLearning.bind(this)
            this.listSharedLearnings = this.listSharedLearnings.bind(this)
        }

        /**
         * Creates a new shared learning post.
         */
        public async createSharedLearning(params: RequestType<typeof api_community_shared_learnings_createSharedLearning>): Promise<ResponseType<typeof api_community_shared_learnings_createSharedLearning>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/community/shared-learnings`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_community_shared_learnings_createSharedLearning>
        }

        /**
         * Retrieves all shared learning posts.
         */
        public async listSharedLearnings(): Promise<ResponseType<typeof api_community_shared_learnings_listSharedLearnings>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/community/shared-learnings`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_community_shared_learnings_listSharedLearnings>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getAnalytics as api_journal_analytics_getAnalytics } from "~backend/journal/analytics";
import {
    createEntry as api_journal_entries_createEntry,
    deleteEntry as api_journal_entries_deleteEntry,
    getEntry as api_journal_entries_getEntry,
    listEntries as api_journal_entries_listEntries,
    updateEntry as api_journal_entries_updateEntry
} from "~backend/journal/entries";
import { health as api_journal_health_health } from "~backend/journal/health";

export namespace journal {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createEntry = this.createEntry.bind(this)
            this.deleteEntry = this.deleteEntry.bind(this)
            this.getAnalytics = this.getAnalytics.bind(this)
            this.getEntry = this.getEntry.bind(this)
            this.health = this.health.bind(this)
            this.listEntries = this.listEntries.bind(this)
            this.updateEntry = this.updateEntry.bind(this)
        }

        /**
         * Creates a new journal entry.
         */
        public async createEntry(params: RequestType<typeof api_journal_entries_createEntry>): Promise<ResponseType<typeof api_journal_entries_createEntry>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/journal/entries`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_journal_entries_createEntry>
        }

        /**
         * Deletes a journal entry.
         */
        public async deleteEntry(params: { id: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/journal/entries/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Retrieves journal analytics for the current user.
         */
        public async getAnalytics(): Promise<ResponseType<typeof api_journal_analytics_getAnalytics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/journal/analytics`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_journal_analytics_getAnalytics>
        }

        /**
         * Retrieves a specific journal entry.
         */
        public async getEntry(params: { id: string }): Promise<ResponseType<typeof api_journal_entries_getEntry>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/journal/entries/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_journal_entries_getEntry>
        }

        /**
         * Health check endpoint for the journal module.
         */
        public async health(): Promise<ResponseType<typeof api_journal_health_health>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/journal/health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_journal_health_health>
        }

        /**
         * Retrieves all journal entries for the current user.
         */
        public async listEntries(params: RequestType<typeof api_journal_entries_listEntries>): Promise<ResponseType<typeof api_journal_entries_listEntries>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "date_from": params["date_from"] === undefined ? undefined : params["date_from"].toISOString(),
                "date_to":   params["date_to"] === undefined ? undefined : params["date_to"].toISOString(),
                limit:       params.limit === undefined ? undefined : String(params.limit),
                offset:      params.offset === undefined ? undefined : String(params.offset),
                search:      params.search,
                tags:        params.tags?.map((v) => v),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/journal/entries`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_journal_entries_listEntries>
        }

        /**
         * Updates an existing journal entry.
         */
        public async updateEntry(params: RequestType<typeof api_journal_entries_updateEntry>): Promise<ResponseType<typeof api_journal_entries_updateEntry>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content:  params.content,
                location: params.location,
                mood:     params.mood,
                tags:     params.tags,
                title:    params.title,
                weather:  params.weather,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/journal/entries/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_journal_entries_updateEntry>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { getAnalytics as api_meditation_analytics_getAnalytics } from "~backend/meditation/analytics";
import { health as api_meditation_health_health } from "~backend/meditation/health";
import {
    endSession as api_meditation_sessions_endSession,
    getCurrentSession as api_meditation_sessions_getCurrentSession,
    listSessions as api_meditation_sessions_listSessions,
    startSession as api_meditation_sessions_startSession
} from "~backend/meditation/sessions";

export namespace meditation {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.endSession = this.endSession.bind(this)
            this.getAnalytics = this.getAnalytics.bind(this)
            this.getCurrentSession = this.getCurrentSession.bind(this)
            this.health = this.health.bind(this)
            this.listSessions = this.listSessions.bind(this)
            this.startSession = this.startSession.bind(this)
        }

        /**
         * Ends a meditation session and marks it as completed.
         */
        public async endSession(params: RequestType<typeof api_meditation_sessions_endSession>): Promise<ResponseType<typeof api_meditation_sessions_endSession>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                "mood_after": params["mood_after"],
                notes:        params.notes,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/meditation/sessions/${encodeURIComponent(params.id)}/end`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_meditation_sessions_endSession>
        }

        /**
         * Retrieves meditation analytics for the current user.
         */
        public async getAnalytics(): Promise<ResponseType<typeof api_meditation_analytics_getAnalytics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/meditation/analytics`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_meditation_analytics_getAnalytics>
        }

        /**
         * Gets the current active session for the user.
         */
        public async getCurrentSession(): Promise<ResponseType<typeof api_meditation_sessions_getCurrentSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/meditation/sessions/current`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_meditation_sessions_getCurrentSession>
        }

        /**
         * Health check endpoint for the meditation module.
         */
        public async health(): Promise<ResponseType<typeof api_meditation_health_health>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/meditation/health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_meditation_health_health>
        }

        /**
         * Retrieves meditation sessions for the current user.
         */
        public async listSessions(params: RequestType<typeof api_meditation_sessions_listSessions>): Promise<ResponseType<typeof api_meditation_sessions_listSessions>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                completed:   params.completed === undefined ? undefined : String(params.completed),
                "date_from": params["date_from"] === undefined ? undefined : params["date_from"].toISOString(),
                "date_to":   params["date_to"] === undefined ? undefined : params["date_to"].toISOString(),
                limit:       params.limit === undefined ? undefined : String(params.limit),
                offset:      params.offset === undefined ? undefined : String(params.offset),
                soundscape:  params.soundscape,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/meditation/sessions`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_meditation_sessions_listSessions>
        }

        /**
         * Starts a new meditation session.
         */
        public async startSession(params: RequestType<typeof api_meditation_sessions_startSession>): Promise<ResponseType<typeof api_meditation_sessions_startSession>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/meditation/sessions/start`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_meditation_sessions_startSession>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    del as api_messenger_messages_del,
    edit as api_messenger_messages_edit,
    listMessages as api_messenger_messages_listMessages,
    markAsRead as api_messenger_messages_markAsRead,
    send as api_messenger_messages_send
} from "~backend/messenger/messages";
import { events as api_messenger_stream_events } from "~backend/messenger/stream";
import {
    addMembers as api_messenger_threads_addMembers,
    leave as api_messenger_threads_leave,
    listThreads as api_messenger_threads_listThreads,
    rename as api_messenger_threads_rename,
    start as api_messenger_threads_start
} from "~backend/messenger/threads";
import { getUploadUrl as api_messenger_upload_getUploadUrl } from "~backend/messenger/upload";

export namespace messenger {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addMembers = this.addMembers.bind(this)
            this.del = this.del.bind(this)
            this.edit = this.edit.bind(this)
            this.events = this.events.bind(this)
            this.getUploadUrl = this.getUploadUrl.bind(this)
            this.leave = this.leave.bind(this)
            this.listMessages = this.listMessages.bind(this)
            this.listThreads = this.listThreads.bind(this)
            this.markAsRead = this.markAsRead.bind(this)
            this.rename = this.rename.bind(this)
            this.send = this.send.bind(this)
            this.start = this.start.bind(this)
        }

        /**
         * Adds members to a thread.
         */
        public async addMembers(params: RequestType<typeof api_messenger_threads_addMembers>): Promise<void> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                userIds: params.userIds,
            }

            await this.baseClient.callTypedAPI(`/messenger/threads/${encodeURIComponent(params.threadId)}/members`, {method: "POST", body: JSON.stringify(body)})
        }

        /**
         * Deletes a message.
         */
        public async del(params: { messageId: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/messenger/messages/${encodeURIComponent(params.messageId)}`, {method: "DELETE", body: undefined})
        }

        /**
         * Edits an existing message.
         */
        public async edit(params: RequestType<typeof api_messenger_messages_edit>): Promise<ResponseType<typeof api_messenger_messages_edit>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                body:    params.body,
                content: params.content,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/messenger/messages/${encodeURIComponent(params.messageId)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_messenger_messages_edit>
        }

        /**
         * Real-time event stream for messenger
         */
        public async events(params: RequestType<typeof api_messenger_stream_events>): Promise<StreamInOut<StreamRequest<typeof api_messenger_stream_events>, StreamResponse<typeof api_messenger_stream_events>>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                threadId: params.threadId,
            })

            return await this.baseClient.createStreamInOut(`/messenger/events`, {query})
        }

        /**
         * Generates a signed URL for uploading a file.
         */
        public async getUploadUrl(params: RequestType<typeof api_messenger_upload_getUploadUrl>): Promise<ResponseType<typeof api_messenger_upload_getUploadUrl>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/messenger/files/upload-url`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_messenger_upload_getUploadUrl>
        }

        /**
         * Leaves a thread.
         */
        public async leave(params: { threadId: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/messenger/threads/${encodeURIComponent(params.threadId)}/members/self`, {method: "DELETE", body: undefined})
        }

        /**
         * Lists messages for a thread.
         */
        public async listMessages(params: { threadId: string }): Promise<ResponseType<typeof api_messenger_messages_listMessages>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/messenger/threads/${encodeURIComponent(params.threadId)}/messages`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_messenger_messages_listMessages>
        }

        /**
         * Lists all threads for the current user.
         */
        public async listThreads(): Promise<ResponseType<typeof api_messenger_threads_listThreads>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/messenger/threads`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_messenger_threads_listThreads>
        }

        /**
         * Marks a thread as read.
         */
        public async markAsRead(params: { threadId: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/messenger/threads/${encodeURIComponent(params.threadId)}/read`, {method: "POST", body: undefined})
        }

        /**
         * Renames a thread.
         */
        public async rename(params: RequestType<typeof api_messenger_threads_rename>): Promise<void> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                title: params.title,
            }

            await this.baseClient.callTypedAPI(`/messenger/threads/${encodeURIComponent(params.threadId)}/rename`, {method: "PUT", body: JSON.stringify(body)})
        }

        /**
         * Sends a new message.
         */
        public async send(params: RequestType<typeof api_messenger_messages_send>): Promise<ResponseType<typeof api_messenger_messages_send>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/messenger/messages`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_messenger_messages_send>
        }

        /**
         * Starts a new thread.
         */
        public async start(params: RequestType<typeof api_messenger_threads_start>): Promise<ResponseType<typeof api_messenger_threads_start>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/messenger/threads`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_messenger_threads_start>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createCircle as api_social_circles_createCircle,
    joinCircle as api_social_circles_joinCircle,
    leaveCircle as api_social_circles_leaveCircle,
    listCircles as api_social_circles_listCircles
} from "~backend/social/circles";
import {
    createComment as api_social_comments_createComment,
    listComments as api_social_comments_listComments
} from "~backend/social/comments";
import {
    createPost as api_social_posts_createPost,
    listPosts as api_social_posts_listPosts,
    toggleReaction as api_social_posts_toggleReaction
} from "~backend/social/posts";

export namespace social {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createCircle = this.createCircle.bind(this)
            this.createComment = this.createComment.bind(this)
            this.createPost = this.createPost.bind(this)
            this.joinCircle = this.joinCircle.bind(this)
            this.leaveCircle = this.leaveCircle.bind(this)
            this.listCircles = this.listCircles.bind(this)
            this.listComments = this.listComments.bind(this)
            this.listPosts = this.listPosts.bind(this)
            this.toggleReaction = this.toggleReaction.bind(this)
        }

        /**
         * Creates a new circle.
         */
        public async createCircle(params: RequestType<typeof api_social_circles_createCircle>): Promise<ResponseType<typeof api_social_circles_createCircle>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/social/circles`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_social_circles_createCircle>
        }

        /**
         * Creates a new comment.
         */
        public async createComment(params: RequestType<typeof api_social_comments_createComment>): Promise<ResponseType<typeof api_social_comments_createComment>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content: params.content,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/social/posts/${encodeURIComponent(params.postId)}/comments`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_social_comments_createComment>
        }

        /**
         * Creates a new post.
         */
        public async createPost(params: RequestType<typeof api_social_posts_createPost>): Promise<ResponseType<typeof api_social_posts_createPost>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/social/posts`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_social_posts_createPost>
        }

        /**
         * Joins a circle.
         */
        public async joinCircle(params: { circleId: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/social/circles/${encodeURIComponent(params.circleId)}/join`, {method: "POST", body: undefined})
        }

        /**
         * Leaves a circle.
         */
        public async leaveCircle(params: { circleId: string }): Promise<void> {
            await this.baseClient.callTypedAPI(`/social/circles/${encodeURIComponent(params.circleId)}/leave`, {method: "POST", body: undefined})
        }

        /**
         * Lists all circles.
         */
        public async listCircles(): Promise<ResponseType<typeof api_social_circles_listCircles>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/social/circles`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_social_circles_listCircles>
        }

        /**
         * Lists comments for a post.
         */
        public async listComments(params: { postId: string }): Promise<ResponseType<typeof api_social_comments_listComments>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/social/posts/${encodeURIComponent(params.postId)}/comments`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_social_comments_listComments>
        }

        /**
         * Lists posts for the feed.
         */
        public async listPosts(params: RequestType<typeof api_social_posts_listPosts>): Promise<ResponseType<typeof api_social_posts_listPosts>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                "circle_id": params["circle_id"],
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/social/posts`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_social_posts_listPosts>
        }

        /**
         * Toggles a reaction on a post.
         */
        public async toggleReaction(params: RequestType<typeof api_social_posts_toggleReaction>): Promise<void> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                kind: params.kind,
            }

            await this.baseClient.callTypedAPI(`/social/posts/${encodeURIComponent(params.postId)}/reactions`, {method: "POST", body: JSON.stringify(body)})
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    detailedHealth as api_system_health_detailedHealth,
    liveness as api_system_health_liveness,
    metrics as api_system_health_metrics,
    readiness as api_system_health_readiness,
    systemHealth as api_system_health_systemHealth
} from "~backend/system/health";

export namespace system {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.detailedHealth = this.detailedHealth.bind(this)
            this.liveness = this.liveness.bind(this)
            this.metrics = this.metrics.bind(this)
            this.readiness = this.readiness.bind(this)
            this.systemHealth = this.systemHealth.bind(this)
        }

        /**
         * Detailed health check for monitoring systems
         */
        public async detailedHealth(): Promise<ResponseType<typeof api_system_health_detailedHealth>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/health/detailed`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_health_detailedHealth>
        }

        /**
         * Liveness probe for Kubernetes/container orchestration
         */
        public async liveness(): Promise<ResponseType<typeof api_system_health_liveness>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/live`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_health_liveness>
        }

        /**
         * Metrics endpoint for monitoring systems
         */
        public async metrics(): Promise<ResponseType<typeof api_system_health_metrics>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/metrics`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_health_metrics>
        }

        /**
         * Readiness probe for Kubernetes/container orchestration
         */
        public async readiness(): Promise<ResponseType<typeof api_system_health_readiness>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/ready`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_health_readiness>
        }

        /**
         * Enhanced system-wide health check that aggregates all module health statuses.
         */
        public async systemHealth(): Promise<ResponseType<typeof api_system_health_systemHealth>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/system/health`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_system_health_systemHealth>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.48.8)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
